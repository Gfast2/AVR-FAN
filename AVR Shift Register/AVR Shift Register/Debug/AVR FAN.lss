
AVR FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000e2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000012f  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a8  00000000  00000000  00000317  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000104  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000085  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	5b c0       	rjmp	.+182    	; 0xc0 <__vector_4>
   a:	22 c0       	rjmp	.+68     	; 0x50 <__bad_interrupt>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__vector_8>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e2 ee       	ldi	r30, 0xE2	; 226
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	02 c0       	rjmp	.+4      	; 0x36 <__do_copy_data+0x10>
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	a2 36       	cpi	r26, 0x62	; 98
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <__do_copy_data+0xc>

0000003c <__do_clear_bss>:
  3c:	20 e0       	ldi	r18, 0x00	; 0
  3e:	a2 e6       	ldi	r26, 0x62	; 98
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	01 c0       	rjmp	.+2      	; 0x46 <.do_clear_bss_start>

00000044 <.do_clear_bss_loop>:
  44:	1d 92       	st	X+, r1

00000046 <.do_clear_bss_start>:
  46:	a4 36       	cpi	r26, 0x64	; 100
  48:	b2 07       	cpc	r27, r18
  4a:	e1 f7       	brne	.-8      	; 0x44 <.do_clear_bss_loop>
  4c:	09 d0       	rcall	.+18     	; 0x60 <main>
  4e:	47 c0       	rjmp	.+142    	; 0xde <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <initialise_ADC>:
volatile uint16_t voltage_reading;
volatile uint8_t  dutyCycle = 127; 

void initialise_ADC(void)
{
	ADCSRA |= 1<<ADEN | 1<<ADIE | 1<<ADPS0 | 1<<ADPS2;
  52:	86 b1       	in	r24, 0x06	; 6
  54:	8d 68       	ori	r24, 0x8D	; 141
  56:	86 b9       	out	0x06, r24	; 6
	ADMUX  |= 1<<MUX1;	// PB3 as ADC pin
  58:	39 9a       	sbi	0x07, 1	; 7
  5a:	08 95       	ret

0000005c <start_conversion>:
}

void start_conversion(void)
{
	ADCSRA |= 1<<ADSC;
  5c:	36 9a       	sbi	0x06, 6	; 6
  5e:	08 95       	ret

00000060 <main>:
}


int main(void)
{
	sei();
  60:	78 94       	sei

	initialise_ADC();
  62:	f7 df       	rcall	.-18     	; 0x52 <initialise_ADC>
	start_conversion();
  64:	fb df       	rcall	.-10     	; 0x5c <start_conversion>
	
	DDRB |= (1 << PB0) | (1 << PB1);						// PWM control pin, as output
  66:	87 b3       	in	r24, 0x17	; 23
  68:	83 60       	ori	r24, 0x03	; 3
  6a:	87 bb       	out	0x17, r24	; 23
	//TIMSK |= (1<<TOIE0);								// Timer/Counter0 Overflow Interrupt Enable
	//OCR0A = 125;										// should later be comment out to let interrupt handle this problem.
	//OCR0B = 125;
	//TCCR0B |= (1<<CS00);								// no prescaler
	
	OCR1C = 127;											// setting the PWM speed. In this case, it is working @500KHz
  6c:	8f e7       	ldi	r24, 0x7F	; 127
  6e:	8d bd       	out	0x2d, r24	; 45
	TCCR1 |= (1 << PWM1A) | (1 << COM1A0) | (1 << CS10);	// PWM mode + clear OC1A output line + CK/2. COM1A0 decide if PB0 get inverted signal!! Page:87
  70:	80 b7       	in	r24, 0x30	; 48
  72:	81 65       	ori	r24, 0x51	; 81
  74:	80 bf       	out	0x30, r24	; 48
	TIMSK |= (1 << TOIE1);									//P.92 Timer/Counter Overflow Interrupt Enable
  76:	89 b7       	in	r24, 0x39	; 57
  78:	84 60       	ori	r24, 0x04	; 4
  7a:	89 bf       	out	0x39, r24	; 57
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main+0x1c>

0000007e <__vector_8>:
	
	while(1){}
}

ISR(ADC_vect)
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	voltage_reading = ADC;
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	95 b1       	in	r25, 0x05	; 5
  90:	90 93 63 00 	sts	0x0063, r25
  94:	80 93 62 00 	sts	0x0062, r24
	dutyCycle = voltage_reading / 8; // voltage_reading: 0 ~ 1023, dutyCycle: 0 ~ 127
  98:	80 91 62 00 	lds	r24, 0x0062
  9c:	90 91 63 00 	lds	r25, 0x0063
  a0:	96 95       	lsr	r25
  a2:	87 95       	ror	r24
  a4:	96 95       	lsr	r25
  a6:	87 95       	ror	r24
  a8:	96 95       	lsr	r25
  aa:	87 95       	ror	r24
  ac:	80 93 60 00 	sts	0x0060, r24
	ADCSRA |= 1<<ADSC;
  b0:	36 9a       	sbi	0x06, 6	; 6
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_4>:
	OCR0B = dutyCycle;
}
*/

ISR(TIMER1_OVF_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
	OCR1A = dutyCycle;
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	8e bd       	out	0x2e, r24	; 46
}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
