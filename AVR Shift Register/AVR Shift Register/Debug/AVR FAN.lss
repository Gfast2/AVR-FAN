
AVR FAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000ea  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000180  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f0  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000111  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000168  00000000  00000000  00000509  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f7  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000113  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	5b c0       	rjmp	.+182    	; 0xc2 <__vector_5>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__vector_8>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	ea ee       	ldi	r30, 0xEA	; 234
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	02 c0       	rjmp	.+4      	; 0x36 <__do_copy_data+0x10>
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	a2 36       	cpi	r26, 0x62	; 98
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <__do_copy_data+0xc>

0000003c <__do_clear_bss>:
  3c:	20 e0       	ldi	r18, 0x00	; 0
  3e:	a2 e6       	ldi	r26, 0x62	; 98
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	01 c0       	rjmp	.+2      	; 0x46 <.do_clear_bss_start>

00000044 <.do_clear_bss_loop>:
  44:	1d 92       	st	X+, r1

00000046 <.do_clear_bss_start>:
  46:	a6 36       	cpi	r26, 0x66	; 102
  48:	b2 07       	cpc	r27, r18
  4a:	e1 f7       	brne	.-8      	; 0x44 <.do_clear_bss_loop>
  4c:	09 d0       	rcall	.+18     	; 0x60 <main>
  4e:	4b c0       	rjmp	.+150    	; 0xe6 <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <initialise_ADC>:
 *		40.960		lightness changes don't obviously (or maybe is 33.792 equal to @165mv)
 *		 0.799		voltage at maximum lightness
 */
void initialise_ADC(void)
{
	ADCSRA |= 1<<ADEN | 1<<ADIE | 1<<ADPS0 | 1<<ADPS2;
  52:	86 b1       	in	r24, 0x06	; 6
  54:	8d 68       	ori	r24, 0x8D	; 141
  56:	86 b9       	out	0x06, r24	; 6
	ADMUX  |= 1<<MUX1 /* | 1<<MUX0 */;						// PB3 as ADC pin
  58:	39 9a       	sbi	0x07, 1	; 7
  5a:	08 95       	ret

0000005c <start_conversion>:
}

void start_conversion(void)
{
	ADCSRA |= 1<<ADSC;
  5c:	36 9a       	sbi	0x06, 6	; 6
  5e:	08 95       	ret

00000060 <main>:
}


int main(void)
{
	sei();
  60:	78 94       	sei
	//initialise_74HC595();
	initialise_ADC();
  62:	f7 df       	rcall	.-18     	; 0x52 <initialise_ADC>
	start_conversion();
  64:	fb df       	rcall	.-10     	; 0x5c <start_conversion>
	
	DDRB |= (1<<PB0) | (1<<PB1);						// PWM control pin, as output
  66:	87 b3       	in	r24, 0x17	; 23
  68:	83 60       	ori	r24, 0x03	; 3
  6a:	87 bb       	out	0x17, r24	; 23
	TCCR0A |= (1<<COM0A1) | (1<<WGM00) | (1<<WGM01);	// fast PWM mode + small settings
  6c:	8a b5       	in	r24, 0x2a	; 42
  6e:	83 68       	ori	r24, 0x83	; 131
  70:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK |= (1<<TOIE0);								// Here some differences.
  72:	89 b7       	in	r24, 0x39	; 57
  74:	82 60       	ori	r24, 0x02	; 2
  76:	89 bf       	out	0x39, r24	; 57
	
	OCR0A = 125;										// should later be comment out to let interrupt handle this problem.
  78:	8d e7       	ldi	r24, 0x7D	; 125
  7a:	89 bd       	out	0x29, r24	; 41
	//OCR0A = 191;//75/100*255;
	
	TCCR0B |= (1<<CS00);								// no prescaler
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	83 bf       	out	0x33, r24	; 51
  82:	ff cf       	rjmp	.-2      	; 0x82 <main+0x22>

00000084 <__vector_8>:
}



ISR(ADC_vect)
{
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
	voltage_reading = ADC;
  92:	84 b1       	in	r24, 0x04	; 4
  94:	95 b1       	in	r25, 0x05	; 5
  96:	90 93 63 00 	sts	0x0063, r25
  9a:	80 93 62 00 	sts	0x0062, r24
	
	//write_74HC595(LED_patterns[firstdigit]);
	// TODO :   Add a variable to send back to main loop, in order to drive FAN with the Speed it should using.
	
	
	dutyCycle = voltage_reading / 4; // voltage_reading: 0 ~ 1023, dutyCycle: 0 ~ 255
  9e:	80 91 62 00 	lds	r24, 0x0062
  a2:	90 91 63 00 	lds	r25, 0x0063
  a6:	96 95       	lsr	r25
  a8:	87 95       	ror	r24
  aa:	96 95       	lsr	r25
  ac:	87 95       	ror	r24
  ae:	80 93 60 00 	sts	0x0060, r24
	ADCSRA |= 1<<ADSC;
  b2:	36 9a       	sbi	0x06, 6	; 6
}
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_5>:

ISR(TIMER0_OVF_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
	OCR0A = dutyCycle;
  ce:	80 91 60 00 	lds	r24, 0x0060
  d2:	89 bd       	out	0x29, r24	; 41
	OCR0B = dutyCycle;
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	88 bd       	out	0x28, r24	; 40
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
